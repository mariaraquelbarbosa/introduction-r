setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula06")
#criar data-frames
dados_alunos<-data.frame(
Nome = c("Alexandre", "Allan", "Andre", "Bernardo"),
P1 = c(3.5, 5, 8, 9),
P2 = c(5.5, 6, 7.5, 5.5)
)
print(dados_alunos)
typeof(dados_alunos)
#adicionar linhas a um data-frame
dados_alunos_novos<-data.frame(
Nome = c("Bruna", "Camila"),
P1 = c(9, 6.5),
P2 = c(4.6, 7.3)
)
print(dados_alunos_novos)
dados_alunos<-rbind(dados_alunos, dados_alunos_novos)
print(dados_alunos)
#adicionar colunas ao data-frame
dados_colunaSub<-data.frame(sub=c(6.5, NA, 5.0, NA, 8.0, NA))
dados_alunos<-cbind(dados_alunos, dados_colunaSub)
print(dados_alunos)
dados_alunos$Rec<-c(8.5, NA, 8.5, NA, NA, NA)
print(dados_alunos)
#seleção por valores
alunos_p1<-subset(dados_alunos, dados_alunos$P1 >= 8)
print(alunos_p1)
alunos_p1<-subset(dados_alunos, !(dados_alunos$P1 >= 8))
print(alunos_p1)
alunos_p1<-subset(dados_alunos, dados_alunos$P1 >= 3 & dados_alunos$P1 <= 7)
print(alunos_p1)
alunos_p1<-subset(dados_alunos, dados_alunos$P1 < 5 | dados_alunos$P1 > 8)
print(alunos_p1)
#operadores relacionais
## < menor que
## > maior que
## <= menor ou igual
## >= maior ou igual
## == igual
## != diferente
5>4
5<=NA
print(dados_alunos[5,])
dados_alunos[5,"Sub"] <= 6.8
#seleciona apenas os elementos com resultado TRUE
v<-c(12, 34,2, 55, 32)
subset(v, v>30)
print(dados_alunos)
culunaP1<- dados_alunos$P1
colunaP1<- dados_alunos$P1
print(colunaP1)
subset(colunaP1, colunaP1>5)
subset(dados_alunos, dados_alunos$P1>5)
subset(dados_alunos, dados_alunos$sub>5)
v<-c(12,34,2,55,32)
subset(v,!(v>30)) #valor não superior a 30
subset(v, (v>30)&(v<=55)) #intervalo entre 30 e 55 (inclusive)
subset(v,(v<30|v>34)) #intervalos menores que 30 ou maiores que 34
#identificar elementos indefinidos (is.na())
print(dados_alunos[3,"Rec"])
is.na(dados_alunos[4,"Rec"]) #é um valor indefinido?
is.na(dados_alunos[3,"Rec"]) #é um valor indefinido?
print(dados_alunos[4,"Rec"])
is.na(dados_alunos[4,"Rec"])
colRec<-dados_alunos$Rec
print(colRec)
is.na(colRec)
print(colRec)
is.na(colRec)
!(is.na(colRec))
subset(dados_alunos, is.na(dados_alunos$Rec))
subset(dados_alunos, !(is.na(dados_alunos$Rec)))
subset(dados_alunos, (is.na(dados_alunos$Rec))&!(is.na(dados_alunos$Sub)))
subset(dados_alunos, (is.na(dados_alunos$Rec)) & !(is.na(dados_alunos$Sub)))
print(dados_alunos)
subset(dados_alunos, (is.na(dados_alunos$Rec)) & !(is.na(dados_alunos$Sub)))
subset(dados_alunos, (is.na(dados_alunos$Rec)) & !(is.na(dados_alunos$sub)))
#encontrar linhas do data-frame com determinados valores
cambru<-subset(dados_alunos, dados_alunos$Nome %in% c("Camila", "Bruna"))
print(cambru)
cambru1<- dados_alunos[dados_alunos$Nome %in% c("Camila", "Bruna"),]
print(cambru1)
#qual o índice da linha para um determinado valor?
print(dados_alunos)
which(dados_alunos$Nome == "Camila")
which(dados_alunos$P2>7)
which(dados_alunos$P2>7 | dados_alunos$P1<5)
#dados de forma gráfica
plot(dados_alunos$P2)
barplot(dados_alunos$P2)
hist(dados_alunos$P2)
dados_alunos[5,"sub"] <= 6.8
setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula06")
setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula06")
# 1.
# lÃª e imprime a planilha
dadosalunos <- read.csv(file = "alunosnotas.csv", header = TRUE)  # lÃª a planilha com cabeÃ§alho
print(dadosalunos)
# confere se a variÃ¡vel Ã© um data-frame
is.data.frame(dadosalunos)
a <- 18.7
b <- 4.8
a > b
a <= 20
(a + 20)/b >= 10
(a + 10)/b > ((2*a + 20) * (1/(2*b)))
v1 <- seq(1,16, by=.8)
v2 <- seq(1,16, length.out = 19)
print(v1)
print(v2)
v1 > 5
(v1 + 0.3) >= v2
# relacionais com subset()
subset(v1, v1 > 5)
subset(v1, (v1 + 0.3) >= v2 )
subset(v2, (v1 + 0.3) >= v2 )
# elaborar subconjuntos de vetores
print(dadosalunos$P1)
print(dadosalunos$P2)
#a. elabore a expressÃ£o lÃ³gica que compara se a nota da P1 Ã© maior que a nota da P2:
dadosalunos$P1 > dadosalunos$P2
#b. selecione o subconjunto de notas da P1 que foram maiores que as notas da P2:
subset(dadosalunos$P1, dadosalunos$P1 > dadosalunos$P2)
#d. selecione o subconjunto de notas Sub que sÃ£o menores que as notas da P2 ou da P1:
subset(dadosalunos$Sub, (dadosalunos$Sub < dadosalunos$P2) | (dadosalunos$Sub < dadosalunos$P1))
#c. elabore a expressÃ£o lÃ³gica que compara se a nota da Sub Ã© menor que as notas da P2 ou da P1:
(dadosalunos$Sub, (dadosalunos$Sub < dadosalunos$P2) | (dadosalunos$Sub < dadosalunos$P1)
#c. elabore a expressÃ£o lÃ³gica que compara se a nota da Sub Ã© menor que as notas da P2 ou da P1:
(dadosalunos$Sub < dadosalunos$P2) | (dadosalunos$Sub < dadosalunos$P1)
#e. elabore a expressÃ£o lÃ³gica que compara se a nota da Sub Ã© maior ou igual Ã s notas da P2 e da P1:
(dadosalunos$Sub>=dadosalunos$P1) & (dadosalunos$Sub>=dadosalunos$P2)
#f. selecione o subconjunto de notas Sub que sÃ£o maiores que as notas da P2 e da P1:subset(dadosalunos$Sub, (dadosalunos$Sub >= dadosalunos$P1) & (dadosalunos$Sub >= dadosalunos$P2))
subset(dadosalunos$Sub, (dadosalunos$Sub>=dadosalunos$P1) & (dadosalunos$Sub>=dadosalunos$P2))
#  a. as notas da P1 sÃ£o maiores que as notas da P2:
subset(dadosalunos, dadosalunos$P1<dadosalunos$P2)
#  b. as notas da Sub sÃ£o menores que as notas da P2 ou da P1:
subset(dadosalunos, (dadosalunos$Sub<dadosalunos$P2) | (dadosalunos$Sub<dadosalunos$P1))
#  c. as notas da Sub sÃ£o maiores que as notas da P2 e da P1:
subset(dadosalunos, (dadosalunos$Sub>dadosalunos$P2)&(dadosalunos$Sub>dadosalunos$P1))
#  d. contÃ©m apenas os alunos _c("Marcos", "Rafael", "Maria", "Denis")_
subset(dadosalunos, dadosalunos$Nome %in% c("Marcos", "Rafael", "Maria", "Denis"))
#  e. em quais linhas do data-frame _dadosalunos_ as notas da P1 sÃ£o menores que 5?
which(dadosalunos$P1 < 5)
#a. _alunos_com_sub_: contÃ©m info apenas dos alunos que fizeram a Sub
alunos_com_sub <- subset(dadosalunos, !(is.na(dadosalunos$Sub)))
print(alunos_com_sub)
#b. _alunos_sem_sub_: contÃ©m info apenas dos alunos que NÃO fizeram a Sub
alunos_sem_sub <- subset(dadosalunos, is.na(dadosalunos$Sub))
print(alunos_sem_sub)
#c. _alunos_sub_maior5_: contÃ©m info apenas dos alunos que na Sub obtiveram nota maior que 5
alunos_sub_maior5 <- subset(dadosalunos, dadosalunos$Sub > 5)
print(alunos_sub_maior5)
#d. _alunos_p1_p2_: contÃ©m info apenas dos alunos que fizeram a P1 e a P2 (podem ter feito a Sub ou nÃ£o)
alunos_p1_p2 <- subset(dadosalunos, !(is.na(dadosalunos$P1) & !(is.na(dadosalunos$P2))))
print(alunos_p1_p2)
#d. _alunos_p1_p2_: contÃ©m info apenas dos alunos que fizeram a P1 e a P2 (podem ter feito a Sub ou nÃ£o)
alunos_p1_p2 <- subset(dadosalunos, !(is.na(dadosalunos$P1)) & !(is.na(dadosalunos$P2)))
print(alunos_p1_p2)
#e. _alunos_p2_sub_: contÃ©m info apenas dos alunos que fizeram exclusivamente a P2 e a Sub (nÃ£o fizeram a P1)
alunos_p2_sub <- subset(dadosalunos, !(is.na(dadosalunos$P1)) & !(is.na(dadosalunos$P2)) & (is.na(dadosalunos$Sub)))
print(alunos_p2_sub)
alunos_p2_sub <- subset(alunos_p1_p2, is.na(alunos_p1_p2$Sub))
print(alunos_p2_sub)
#f. _alunos_p1_p2_sub_: contÃ©m info apenas dos alunos que fizeram as 3 provas
alunos_p1_p2_sub <- subset(alunos_p1_p2, !(is.na(alunos_p1_p2$Sub)))
print(alunos_p1_p2_sub)
# P1
plot(dadosalunos$P1)
barplot(dadosalunos$P1)
hist(dadosalunos$P1)
# P2
plot(dadosalunos$P2)
barplot(dadosalunos$P2)
hist(dadosalunos$P2)
# Sub
plot(dadosalunos$P2)
# Sub
plot(dadosalunos$Sub)
barplot(dadosalunos$Sub)
hist(dadosalunos$Sub)
barplot(dadosalunos$P2)
# Sub
plot(dadosalunos$Sub)
hist(dadosalunos$P2)
