setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula07")
# cria variÃ¡veis para imprimir o status da transaÃ§Ã£o
aceita = "TRANSAÃÃO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
verifica_status <- function(saldo_atual){
# verifica a situaÃ§Ã£o apÃ³s o saque
if (saldo_atual >= 0.0){
status<-aceita
}else{
if(saldo_atual >= -100){
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
conta <- as.integer(readline("Digite o nÃºmero da conta corrente:"))
nome  <- as.character(readline("Digite o nome do cliente:"))
saldo <- as.double(readline("Digite o saldo do cliente:"))
saque <- as.double(readline("Digite o valor do saque"))
saque <- as.double(readline("Digite o valor do saque:"))
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
saque <- as.double(readline("Digite o valor do saque:"))
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao = insuficiente){
saldo_atual <- saldo
}
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
# lÃª dados dos saques dos cliente no arquivo csv
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
num_clientes
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
# para cada cliente na planilha (cada linha)
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
# precisamos fazer o mesmo processamento do Exerc. 2
# para cada cliente na planilha (cada linha)
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
conta <- as.integer(readline("Digite o nÃºmero da conta corrente:"))
saldo <- as.double(readline("Digite o saldo do cliente:"))
aceita = "TRANSAÃÃO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
verifica_status <- function(saldo_atual){
# verifica a situaÃ§Ã£o apÃ³s o saque
if (saldo_atual >= 0.0){
status<-aceita
}else{
if(saldo_atual >= -100){
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
# precisamos fazer o mesmo processamento do Exerc. 2
# para cada cliente na planilha (cada linha)
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
# precisamos fazer o mesmo processamento do Exerc. 2
# para cada cliente na planilha (cada linha)
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# corrige o saldo_atual quando Ã© insuficiente
if(status_transacao == insuficiente){
saldo_atual <- saldo
}
cat(conta, "--", nome, "--", status_transacao,"--", "Saldo: ", saldo_atual, "\n")
}
# imprime a planilha sendo usada
print(df_clientes_saques)
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
vetor_status <- NULL
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# acrescenta ao vetor o status desse cliente
vetor_status <- c(vetor_status, status_transacao)
print(vetor_status)
}
df_clientes_saques_status <- cbind(df_clientes_saques, "Status" = vetor_status)
print(df_clientes_saques_status)
print(df_clientes_saques)
aceita = "TRANSAçÃO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# acrescenta ao vetor o status desse cliente
vetor_status <- c(vetor_status, status_transacao)
#print(vetor_status)
}
# cria um novo data-frame: dados anteriores + vetor_status
df_clientes_saques_status <- cbind(df_clientes_saques, "Status" = vetor_status)
print(df_clientes_saques_status)
verifica_status <- function(saldo_atual){
# verifica a situaÃ§Ã£o apÃ³s o saque
if (saldo_atual >= 0.0){
status<-aceita
}else{
if(saldo_atual >= -100){
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# acrescenta ao vetor o status desse cliente
vetor_status <- c(vetor_status, status_transacao)
#print(vetor_status)
}
# cria um novo data-frame: dados anteriores + vetor_status
df_clientes_saques_status <- cbind(df_clientes_saques, "Status" = vetor_status)
print(df_clientes_saques_status)
vetor_status
print(df_clientes_saques)
num_clientes <- nrow(df_clientes_saques)
i <- 0            # i controla os clientes na planilha
vetor_status <- NULL
while(i < num_clientes) {
i <- i + 1  # o cliente que faremos o processamento
# dados do cliente i na planilha
conta <- as.integer(df_clientes_saques[i, "Conta"])
nome  <- as.character(df_clientes_saques[i, "Nome"])
saldo <- as.double(df_clientes_saques[i, "Saldo"])
saque <- as.double(df_clientes_saques[i, "Saque"])
# efetua transaÃ§Ã£o e verifica status
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
# acrescenta ao vetor o status desse cliente
vetor_status <- c(vetor_status, status_transacao)
#print(vetor_status)
}
df_clientes_saques_status <- cbind(df_clientes_saques, "Status" = vetor_status)
print(df_clientes_saques_status)
vetor_status
v1 <- as.integer(seq(1,15, length.out = 10))
v2 <- c(3:5, 23, NA, 14, NA)
tam_v1 <- length(v1)
tam_v2 <- length(v2)
print(v1)
cat("tamanho do vetor v1:", tam_v1, "\n")
print(v2)
cat("tamanho do vetor v2:", tam_v2, "\n")
soma_vetores <- function(vet){
soma <- 0
vet<- subset(vet, !is.na(vet))
tam_vet <- length(vet)
i <- 0
while (i<tam_vet) {
i <- i + 1
soma<- soma + vet[i]
}
return(soma)
}
soma_v2 <- soma_vetores(v2)
print(v2)
print(soma_v2)
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
tam_vets <- length(vet1)
i <- 0
while(i < tam_vets) {
i <- i + 1
vresult[1] <- vet1[i] + vet2[i]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
tam_vets <- length(vet1)
i <- 0
while(i < tam_vets) {
i <- i + 1
vresult[i] <- vet1[i] + vet2[i]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
