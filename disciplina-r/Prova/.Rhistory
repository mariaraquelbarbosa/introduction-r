cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
vet2<-c(vet2, vet2[1:comprimento])
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
vet1<-c(vet1, vet1[1:abs(comprimento)])
comprimento <- length(vet1) - length(vet2)
}
}
}
vresult<- vet1+vet2
return(vresult)
}
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
vet2<-c(vet2, vet2[1:comprimento])
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
vet1<-c(vet1, vet1[1:abs(comprimento)])
comprimento <- length(vet1) - length(vet2)
}
}
}
vresult<- vet1+vet2
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
abs(-1)
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
vet2<-c(vet2, vet2[1:comprimento])
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
vet1<-c(vet1, vet1)
}
}
}
vresult<- vet1+vet2
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
vet2<-c(vet2, vet2[1:comprimento])
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
for (i in vet1) {
vet1<-c(vet1, vet1[i])
}
}
}
}
vresult<- vet1+vet2
return(vresult)
}
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
vet2<-c(vet2, vet2[1:comprimento])
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
for (i in vet1) {
vet1<-c(vet1, vet1[i])
}
}
}
}
vresult<- vet1+vet2
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
while(length(vet2)<length(vet1)){
for (i in vet2) {
vet2<-c(vet2, vet2[i])
}
}
}else{
if(comprimento<0){
while(length(vet1)<length(vet2)){
for (i in vet1) {
vet1<-c(vet1, vet1[i])
}
}
}
}
vresult<- vet1+vet2
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
if(lenght(vet1) > lenght(vet2)){
vresult<-vet1+vet2
}else{
if(lenght(vet2) > lenght(vet1)){
vresult<-vet1+vet2
}
}
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
if(length(vet1) > length(vet2)){
vresult<-vet1+vet2
}else{
if(length(vet2) > length(vet1)){
vresult<-vet1+vet2
}
}
return(vresult)
}
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
source('C:/Users/Joel/OneDrive/Área de Trabalho/Introducao a Computacao/Prova/prova2020.script.R')
v_vazio <- c()
v1 <- c(1)
v2 <- c(1:2)
v3 <- c(10:12)
v5 <- c(10:14)
v_na <- c(NA, 10, 20, NA, 30)
v6 <- c(20:25)
v7 <- c(30:36)
## Testes das questÃµes
# Q2
cat("\n Testes Q2 ")
cat("\n - ", soma_vetores(v_na))
cat("\n - ", soma_vetores(v3))
cat("\n - ", soma_vetores(v6))
# Q3
cat("\n Testes Q3 ")
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_na, v_na)))
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_na, v5)))
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_vazio, v_vazio)))
# Q4
cat("\n Testes Q4 ")
cat("\n - ", as.vector(soma_2vetores_zeros(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_zeros(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_zeros(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_zeros(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_zeros(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_zeros(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_zeros(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_zeros(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_zeros(v2, v_vazio)))
# Q5
cat("\n Testes Q5 ")
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v_vazio)))
# Q6
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
# Script - Prova 2020
# 1. Preparo do ambiente de programacao - RStudio
#    Vide enunciado
# 2. funcoes sobre vetores
# Q1. criar os vetores
v1 <- as.integer(seq(1,15, length.out = 10))
v2 <- c(3:5, 23, NA, 14, NA)
print(v1)
print(v2)
# Q2. soma de todos os elementos dos vetores - eliminar os nao definidos
soma_vetores <- function(vet){
soma <- 0
vet <- subset(vet, !is.na(vet))
for (elem in vet){
soma <- soma + elem
}
return(soma)
}
soma_v2 <- soma_vetores(v2)
print(v2)
print(soma_v2)
# Q3. soma de dois vetores do mesmo tamanho
#
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
for (i in 1:length(vet1)){
vresult[i] <- vet1[i] + vet2[i]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
# Q4. soma de dois vetores - considerar zeros quando um vetor for menor que o outro
#
soma_2vetores_zeros <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
vet2<-c(vet2, rep_len(0, length.out = comprimento))
}else{
if(comprimento<0){
vet1<-c(vet1, rep_len(0, length.out = comprimento*(-1)))
}
}
vresult<- vet1+vet2
return(vresult)
}
soma_vets <- soma_2vetores_zeros(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
# Q5. soma de dois vetores - soma feita ate o tamanho do vetor menor
#                           desprezar os outros elementos do vetor maior
soma_2vetores_ate_tammenor <- function(vet1,vet2){
vresult <- NULL
comprimento<- length(vet1) - length(vet2)
if(comprimento>0){
vet1<- vet1[1:length(vet2)]
}else{
if(comprimento<0){
vet2<- vet2[1:length(vet1)]
}
}
vresult<-vet1+vet2
return(vresult)
}
soma_vets <- soma_2vetores_ate_tammenor(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
# Q6. soma de dois vetores - repetir valores se um vetor for menor que o outro
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
if(length(vet1) > length(vet2)){
vresult<-vet1+vet2
}else{
if(length(vet2) > length(vet1)){
vresult<-vet1+vet2
}
}
return(vresult)
}
soma_vets <- soma_2vetores_repete(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
source('C:/Users/Joel/OneDrive/Área de Trabalho/Introducao a Computacao/Prova/testeProva.q2_q6.R')
setwd("C:/Users/Joel/OneDrive/Área de Trabalho/Introducao a Computacao/Prova")
# Script - Prova 2020
# 1. Preparo do ambiente de programacao - RStudio
#    Vide enunciado
# 2. funcoes sobre vetores
# Q1. criar os vetores
v1 <- as.integer(seq(1,15, length.out = 10))
v2 <- c(3:5, 23, NA, 14, NA)
print(v1)
print(v2)
# Q2. soma de todos os elementos dos vetores - eliminar os nao definidos
soma_vetores <- function(vet){
soma <- 0
vet <- subset(vet, !is.na(vet))
for (elem in vet){
soma <- soma + elem
}
return(soma)
}
soma_v2 <- soma_vetores(v2)
print(v2)
print(soma_v2)
# Q3. soma de dois vetores do mesmo tamanho
#
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
for (i in 1:length(vet1)){
vresult[i] <- vet1[i] + vet2[i]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
# Q4. soma de dois vetores - considerar zeros quando um vetor for menor que o outro
#
soma_2vetores_zeros <- function(vet1,vet2){
vresult <- NULL
comprimento <- length(vet1) - length(vet2)
if(comprimento>0){
vet2<-c(vet2, rep_len(0, length.out = comprimento))
}else{
if(comprimento<0){
vet1<-c(vet1, rep_len(0, length.out = comprimento*(-1)))
}
}
vresult<- vet1+vet2
return(vresult)
}
soma_vets <- soma_2vetores_zeros(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
# Q5. soma de dois vetores - soma feita ate o tamanho do vetor menor
#                           desprezar os outros elementos do vetor maior
soma_2vetores_ate_tammenor <- function(vet1,vet2){
vresult <- NULL
comprimento<- length(vet1) - length(vet2)
if(comprimento>0){
vet1<- vet1[1:length(vet2)]
}else{
if(comprimento<0){
vet2<- vet2[1:length(vet1)]
}
}
vresult<-vet1+vet2
return(vresult)
}
soma_vets <- soma_2vetores_ate_tammenor(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
# Q6. soma de dois vetores - repetir valores se um vetor for menor que o outro
soma_2vetores_repete <- function(vet1,vet2){
vresult <- NULL
if(length(vet1) > length(vet2)){
vresult<-vet1+vet2
}else{
if(length(vet2) > length(vet1)){
vresult<-vet1+vet2
}
}
return(vresult)
}
soma_vets <- soma_2vetores_repete(v1,v2)
print(v1)
print(v2)
cat("Soma dos vetores \n" )
print(soma_vets)
# teste da Prova2020
# valores a serem utilizados
v_vazio <- c()
v1 <- c(1)
v2 <- c(1:2)
v3 <- c(10:12)
v5 <- c(10:14)
v_na <- c(NA, 10, 20, NA, 30)
v6 <- c(20:25)
v7 <- c(30:36)
## Testes das questÃµes
# Q2
cat("\n Testes Q2 ")
cat("\n - ", soma_vetores(v_na))
cat("\n - ", soma_vetores(v3))
cat("\n - ", soma_vetores(v6))
# Q3
cat("\n Testes Q3 ")
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_na, v_na)))
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_na, v5)))
cat("\n - ",
as.vector(soma_2vetores_tam_igual(v_vazio, v_vazio)))
# Q4
cat("\n Testes Q4 ")
cat("\n - ", as.vector(soma_2vetores_zeros(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_zeros(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_zeros(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_zeros(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_zeros(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_zeros(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_zeros(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_zeros(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_zeros(v2, v_vazio)))
# Q5
cat("\n Testes Q5 ")
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_ate_tammenor(v2, v_vazio)))
# Q6
cat("\n Testes Q6 ")
cat("\n - ", as.vector(soma_2vetores_repete(v1, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v6, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v6)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v2)))
cat("\n - ", as.vector(soma_2vetores_repete(v3, v7)))
cat("\n - ", as.vector(soma_2vetores_repete(v7, v3)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v_vazio)))
cat("\n - ", as.vector(soma_2vetores_repete(v_vazio, v1)))
cat("\n - ", as.vector(soma_2vetores_repete(v2, v_vazio)))
source('C:/Users/Joel/OneDrive/Área de Trabalho/Introducao a Computacao/Prova/testeProva.q2_q6.R')
