setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula09")
#Comando de repeti√ß√£o (while)
x<-5
l<-0
i<-0
#Comando de repeti√ß√£o (while)
x<-5
i<-0
while(i < x){
i <- i + 1
cat("\n Hello World - valor de i: ", i)
}
#Comando de repeti√ß√£o (for)
v <- c(1:5)
for(i in v){
cat("\n Hello World - valor de i: ", i)
}
#Problema: m√©dia de alunos de uma turma
n<-as.integer(readline("Digite quantas notas ser√£o lidas: "))
soma <- 0
i<-0
nota<-as.double(readline("Digite uma nota: "))
nota<-as.double(readline("Digite uma nota: "))
soma <- soma + nota
}
soma <- 0
i<-0
#Problema: m√©dia de alunos de uma turma
n<-as.integer(readline("Digite quantas notas ser√£o lidas: "))
while(i < n){
nota<-as.double(readline("Digite uma nota: "))
i <- i + 1
soma <- soma + nota
}
media <- soma / n
cat("\n M√©dia da turma: ", media)
#Problema: m√©dia de alunos de uma turma
n<-as.integer(readline("Digite quantas notas ser√£o lidas: "))
soma <- 0
i<-0
while(i < n){
nota<-as.double(readline("Digite uma nota: "))
i <- i + 1
soma <- soma + nota
}
media <- soma / n
cat("\n M√©dia da turma: ", media)
n <- as.integer(readline("Digite quantas notas ser√£o lidas: "))
v<-c(1:n)
for(i in v){
nota<-as.double(readline("Digite uma nota: "))
soma <- soma + nota
}
v<-c(1:n)
v<-c(i:n)
v<-c(1 : n)
v <- c(1 : n)
n <- as.integer(readline("Digite quantas notas ser√£o lidas: "))
soma<-0
v <- c(1 : n)
for(i in v){
nota<-as.double(readline("Digite uma nota: "))
soma <- soma + nota
}
media <- soma / n
cat("\n M√©dia da turma: ", media)
#Problema
CalculaMediaTurma<-function(n, vnotas){
soma<-0
for(nota in vnotas){
soma <- soma + nota
}
media<-soma/n
return(media)
}
alunos<-read.csv(file = "alunos.sub.csv",
header = TRUE, sep = ",",
as.is = TRUE)
setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula09")
alunos<-read.csv(file = "alunos.sub.csv",
header = TRUE, sep = ",",
as.is = TRUE)
alunos<-read.csv(file = "alunos.sub.csv",
header = TRUE, sep = ",",
as.is = TRUE)
print(alunos)
num_alunos<-nrow(alunos)
mediaP1<- CalculaMediaTurma(num_alunos, alunos$P1)
mediaP2<-CalculaMediaTurma(num_alunos, alunos$P2)
mediaSub<- CalculaMediaTurma(num_alunos, alunos$Sub)
cat("M√©dia da P1: ", mediaP1)
cat("M√©dia de P2: ", mediaP2)
cat("M√©dia de Sub: ", mediaSub)
setwd("C:/Users/Joel/Desktop/Introducao a Computacao/Aula09")
aceita = "TRANSA√á√ÉO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
aceita = "TRANSA√á√ÉO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
# fun√É¬ß√É¬£o - verifica o status da transa√É¬ß√É¬£o
#          entrada: o saldo atual do cliente
#          sa√É≠da: uma das situa√É¬ß√É¬µes (aceita, especial ou insuficiente)
verifica_status <- function(saldo_atual){
# verifica a situa√É¬ß√É¬£o ap√É¬≥s o saque
if (saldo_atual >= 0.0){
status <- aceita
} else{
if (saldo_atual >= -100.0) {
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
if (status == aceita){
return(2 * saldo_atual)
}else{
if (status == especial) {
return(-1 * saldo_atual)
}else{
return(0)
}
}
# fun√É¬ß√É¬£o - verifica o status da transa√É¬ß√É¬£o
#          entrada: o saldo atual do cliente
#          sa√É≠da: uma das situa√É¬ß√É¬µes (aceita, especial ou insuficiente)
verifica_status <- function(saldo_atual){
# verifica a situa√ß√£o ap√≥s o saque
if (saldo_atual >= 0.0){
status <- aceita
} else{
if (saldo_atual >= -100.0) {
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
if (status == aceita){
return(2 * saldo_atual)
}else{
if (status == especial) {
return(-1 * saldo_atual)
}else{
return(0)
}
}
if (status == aceita){
return(2 * saldo_atual)
}else{
if (status == especial) {
return(-1 * saldo_atual)
}else{
return(0)
}
}
calcula_emprestimo <- function(status, saldo_atual){
if (status == aceita){
return(2 * saldo_atual)
}else{
if (status == especial) {
return(-1 * saldo_atual)
}else{
return(0)
}
}
}
# l√É¬™ dados dos saques dos cliente no arquivo csv
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
# precisamos fazer o processamento para cada cliente na planilha (cada linha)
v_num_clientes <- c(1:nrow(df_clientes_saques))      # vetor com o n√É¬∫mero de clientes
# dados do cliente i na planilha
conta <- as.integer(cliente["Conta"])
for (i in v_num_clientes){
cliente <- df_clientes_saques[i, ]    # cliente cont√É¬©m uma linha da planilha
# dados do cliente i na planilha
conta <- as.integer(cliente["Conta"])
nome  <- as.character(cliente["Nome"])
saldo <- as.double(cliente["Saldo"])
saque <- as.double(cliente["Saque"])
# efetua transa√É¬ß√É¬£o, verifica status e calcula o empr√É¬©stimo oferecido
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
emprestimo <- calcula_emprestimo(status_transacao, saldo_atual)
# corrige o saldo_atual quando √É¬© insuficiente
if (status_transacao == insuficiente){
saldo_atual <- saldo
}
# imprime resultado
cat("\n", nome, "--", status_transacao,"--",
"Saldo: ", saldo_atual, "--  Empr√É¬©stimo: ", emprestimo, "\n")
}
aceita = "TRANSA√á√ÉO ACEITA"
especial = "CHEQUE ESPECIAL"
insuficiente = "SALDO INSUFICIENTE"
# fun√É¬ß√É¬£o - verifica o status da transa√É¬ß√É¬£o
#          entrada: o saldo atual do cliente
#          sa√É≠da: uma das situa√É¬ß√É¬µes (aceita, especial ou insuficiente)
verifica_status <- function(saldo_atual){
# verifica a situa√ß√£o ap√≥s o saque
if (saldo_atual >= 0.0){
status <- aceita
} else{
if (saldo_atual >= -100.0) {
status <- especial
}else{
status <- insuficiente
}
}
return(status)
}
calcula_emprestimo <- function(status, saldo_atual){
if (status == aceita){
return(2 * saldo_atual)
}else{
if (status == especial) {
return(-1 * saldo_atual)
}else{
return(0)
}
}
}
# l√É¬™ dados dos saques dos cliente no arquivo csv
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
# precisamos fazer o processamento para cada cliente na planilha (cada linha)
v_num_clientes <- c(1:nrow(df_clientes_saques))      # vetor com o n√É¬∫mero de clientes
for (i in v_num_clientes){
cliente <- df_clientes_saques[i, ]    # cliente cont√É¬©m uma linha da planilha
# dados do cliente i na planilha
conta <- as.integer(cliente["Conta"])
nome  <- as.character(cliente["Nome"])
saldo <- as.double(cliente["Saldo"])
saque <- as.double(cliente["Saque"])
# efetua transa√É¬ß√É¬£o, verifica status e calcula o empr√É¬©stimo oferecido
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
emprestimo <- calcula_emprestimo(status_transacao, saldo_atual)
# corrige o saldo_atual quando √É¬© insuficiente
if (status_transacao == insuficiente){
saldo_atual <- saldo
}
# imprime resultado
cat("\n", nome, "--", status_transacao,"--",
"Saldo: ", saldo_atual, "--  Empr√©stimo: ", emprestimo, "\n")
}
# precisamos fazer o processamento para cada cliente na planilha (cada linha)
v_num_clientes <- 1:nrow(df_clientes_saques)       # vetor com o n√É¬∫mero de clientes
# l√™ dados dos saques dos cliente no arquivo csv
df_clientes_saques <- read.csv(file = "clientes.saques.csv",
header = TRUE, sep = ",",
as.is = TRUE)
# imprime a planilha sendo usada
print(df_clientes_saques)
# precisamos fazer o processamento para cada cliente na planilha (cada linha)
v_num_clientes <- 1:nrow(df_clientes_saques)       # vetor com o n√É¬∫mero de clientes
vetor_status <- NULL
vetor_emprestimo <- NULL
for (i in v_num_clientes){
cliente <- df_clientes_saques[i, ]    # cliente cont√É¬©m uma linha da planilha
# dados do cliente i na planilha
conta <- as.integer(cliente["Conta"])
nome  <- as.character(cliente["Nome"])
saldo <- as.double(cliente["Saldo"])
saque <- as.double(cliente["Saque"])
# efetua transa√É¬ß√É¬£o, verifica status e calcula o empr√É¬©stimo oferecido
saldo_atual <- saldo - saque
status_transacao <- verifica_status(saldo_atual)
emprestimo <- calcula_emprestimo(status_transacao, saldo_atual)
# corrige o saldo_atual quando √É¬© insuficiente
if (status_transacao == insuficiente){
saldo_atual <- saldo
}
# acrescenta aos vetores o status e empr√É¬©stimo desse cliente
vetor_status <- c(vetor_status, status_transacao)
vetor_emprestimo <- c(vetor_emprestimo, emprestimo)
}
df_clientes_saques_status_emprest <- cbind(df_clientes_saques,
"Status" = vetor_status)
df_clientes_saques_status_emprest <- cbind(df_clientes_saques_status_emprest,
"Empr√©stimo" = vetor_emprestimo)
print(df_clientes_saques_status_emprest)
v1 <- as.integer(seq(1,15, length.out = 10))
v2 <- c(3:5, 23, NA, 14, NA)
tam_v1 <- length(v1)
tam_v2 <- length(v2)
print(v1)
cat("tamanho do vetor v1:", tam_v1, "\n")
print(v2)
cat("tamanho do vetor v2:", tam_v2, "\n")
soma_vetores <- function(vet){
soma <- 0
vet <- subset(vet, !is.na(vet))
for (elem in vet){
soma <- soma + elem
}
return(soma)
}
soma_v2 <- soma_vetores(v2)
print(v2)
print(soma_v2)
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
for (i in 1:lenght(vet1)){
vresult[i] <- vet1[i] + vet2[2]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
for (i in 1:length(vet1)){
vresult[i] <- vet1[i] + vet2[2]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
soma_2vetores_tam_igual <- function(vet1,vet2){
vresult <- NULL
for (i in 1:length(vet1)){
vresult[i] <- vet1[i] + vet2[i]
}
return(vresult)
}
soma_vets <- soma_2vetores_tam_igual(v1,v1)
print(v1)
print(soma_vets)
